apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    {{- include "dispatcher.labels" . | nindent 4 }}
  name: {{ include "dispatcher.name" . }}-config
data:
  App.toml: |
    {{- $id := list (include "dispatcher.name" . ) (include "dispatcher.shortNamespace" .) "svc.netology-group.services" | compact | join "." }}
    id = {{ $id | quote }}

    {{- $broker_id := list "mqtt-gateway" (include "dispatcher.shortNamespace" .) "svc.netology-group.services" | compact | join "." }}
    broker_id = {{ $broker_id | quote }}

    retry_delay = "2 seconds"

    default_frontend_base = "https://{{ list (include "dispatcher.shortNamespace" $) "netology-group.services" | compact | join "." }}/"

    tenants = [
      {{- range $audience, $opts := .Values.audiences }}
        {{- if get $opts "mqtt_events" }}
        {{- $ns_audience := list (include "dispatcher.shortNamespace" $) $audience | compact | join "."  }}
        {{ $ns_audience | quote }},
        {{- end }}
      {{- end }}
    ]

    [mqtt]
    uri = "tcp://mqtt-gateway-loadbalancer:51883"
    incoming_message_queue_size = 1000000
    outgoing_message_queue_size = 1000000
    clean_session = false
    reconnect_interval = 3
    keep_alive = 15
    max_message_size = 5000000

    [sentry]
    dsn = "https://390aa49ccd314bd5ac3e41db8e286f4d@sentry.io/1915189"
    environment = {{ .Release.Namespace | quote }}

    [http]
    listener_address = "0.0.0.0:{{ get .Values.service.ports "http" }}"
    metrics_listener_address = "0.0.0.0:{{ get .Values.service.ports "metrics" }}"

    [conference_client]
    {{- $conference := list "conference" (include "dispatcher.shortNamespace" $) "svc.netology-group.services" | compact | join "."  }}
    account_id = {{ $conference | quote }}
    timeout = "5"
    api_version = "v1"

    [event_client]
    {{- $event := list "event" (include "dispatcher.shortNamespace" $) "svc.netology-group.services" | compact | join "."  }}
    account_id = {{ $event | quote }}
    timeout = "5"
    api_version = "v1"

    [tq_client]
    {{- $tq := list "event" (include "dispatcher.shortNamespace" $) "svc.netology-group.services" | compact | join "."  }}
    base_url = "https://{{ $tq }}/"
    account_id = {{ $tq | quote }}
    timeout = "5"
    api_version = "v1"
    {{- range $audience, $opts := .Values.audiences }}
    {{- if hasKey $opts "tq" }}
    {{- $ns_audience := list (include "dispatcher.shortNamespace" $) $audience | compact | join "."  }}
    [tq_client.audience_settings.{{ $ns_audience | quote }}]
    preroll_offset = {{ "preroll_offset" | get (get $opts "tq") }}
    {{- end }}
    {{- end }}

    [storage]
    {{- $storage := list "storage" (include "dispatcher.shortNamespace" $) "svc.netology-group.services" | compact | join "."  }}
    base_url = "https://{{ $storage }}/"

    ##
    ## ULMS
    ##
    [id_token]
    algorithm = "ES256"
    key = "data/keys/svc.private_key.p8.der"

    {{- println "" }}

    {{- range $audience, $opts := .Values.audiences }}
    ##
    ## {{ $audience }}
    ##
    {{- $svc_audience := list (include "dispatcher.shortNamespace" $) "svc" $audience | compact | join "." }}
    {{- $usr_audience := list (include "dispatcher.shortNamespace" $) "usr" $audience | compact | join "." }}
    {{- with "authn" | get $opts }}
    [authn.{{ list "iam" $svc_audience | join "." | quote }}]
    audience = [{{ $svc_audience | quote }}, {{ $usr_audience | quote }}]
    algorithm = "ES256"
    key = {{ "key" | get . | quote }}
    {{- end }}

    {{- $ns_audience := list (include "dispatcher.shortNamespace" $) $audience | compact | join "."  }}
    {{- println "" }}

    {{- with "authz" | get $opts }}
    [authz.{{ $ns_audience | quote }}]
    type = {{ .type | quote }}
    {{- if eq "http" .type }}
    uri = {{ $ns_audience | list "http://dispatcher-service:8080/api/v1/authz/" | join "" | default .uri | quote }}
    algorithm = {{ default "ES256" .algorithm | quote }}
    key = {{ default "data/keys/svc.private_key.p8.der" .key | quote }}
    user_agent = {{ default $id .user_agent | quote }}
    max_retries = {{ default 3 .max_retries }}
    {{- end }}
    {{- if eq "local" .type }}
    trusted = [
      {{- range $account_label := .trusted }}
        {{ $ns_audience | list $account_label | join "." | quote }},
      {{- end }}
    ]
    {{- end }}
    {{- if eq "localwhitelist" .type }}
    [[authz.{{ $ns_audience | quote }}.records]]
    {{- range $record := .records }}
    subject_account_id = {{ get $record "subject_account_id" | quote }}
    object = [
      {{- range $o := get $record "object" }}
      {{ $o | quote }},
      {{- end}}
    ]
    action = {{ get $record "action" | quote }}
    {{- end }}
    {{- end }}
    {{- end }}
    {{- println "" }}
    {{- end }}
