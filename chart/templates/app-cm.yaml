apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    {{- include "dispatcher.labels" . | nindent 4 }}
  name: {{ include "dispatcher.fullname" . }}-app
data:
  App.toml: |
    {{- $id := list (include "dispatcher.name" . ) .Values.app.svc.audience | compact | join "." }}
    id = {{ $id | quote }}

    {{- $brokerId := list "mqtt-gateway" .Values.app.svc.audience | compact | join "." }}
    broker_id = {{ $brokerId | quote }}

    retry_delay = "2 seconds"

    default_frontend_base = "https://ignore/"
    default_frontend_base_new = "https://{{ .Values.ingress.host }}/"

    {{- if .Values.app.turn }}
    turn_hosts = [
      {{- range .Values.app.turn.hosts }}
      {{ . | quote }},
      {{- end }}
    ]
    {{- else }}
    turn_hosts = []
    {{- end }}

    tenants = [
      {{- range .Values.app.audiences }}
        {{- if .mqtt_events }}
        {{ include "dispatcher.tenantObjectAudience" (list $.Release.Namespace .audience) | quote }},
        {{- end }}
      {{- end }}
    ]

    {{- if .Values.app.frontend }}
    {{- range $tenant, $tenantData := .Values.app.frontend }}
    [frontend.{{ $tenant | quote }}]
    base_url = {{ $tenantData.base_url | quote }}
    {{- end}}
    {{- else }}
    [frontend]
    {{- end}}

    [mqtt]
    uri = "tcp://mqtt-gateway-cluster:51883"
    incoming_message_queue_size = 1000000
    outgoing_message_queue_size = 1000000
    clean_session = false
    reconnect_interval = 3
    keep_alive = 15
    max_message_size = 5000000

    [sentry]
    dsn = {{ .Values.sentry.dsn | quote }}
    environment = {{ .Release.Namespace | quote }}

    [http]
    listener_address = "0.0.0.0:8080"
    metrics_listener_address = "0.0.0.0:8888"

    [conference_client]
    {{- $conference := list "conference" .Values.app.svc.audience | compact | join "."  }}
    account_id = {{ $conference | quote }}
    timeout = "5"
    api_version = "v1"

    [event_client]
    {{- $event := list "event" .Values.app.svc.audience | compact | join "."  }}
    account_id = {{ $event | quote }}
    timeout = "5"
    api_version = "v1"

    [tq_client]
    {{- $tq := list "tq" .Values.app.svc.audience | compact | join "."  }}
    base_url = "http://tq-cluster:3000/"
    account_id = {{ $tq | quote }}
    timeout = "5"
    api_version = "v1"
    {{- range .Values.app.audiences }}
    {{- if hasKey . "tq" }}
    [tq_client.audience_settings.{{ include "dispatcher.tenantObjectAudience" (list $.Release.Namespace .audience) | quote }}]
    {{- if hasKey .tq "preroll" }}
    preroll = {{ .tq.preroll | quote }}
    {{- end }}
    {{- if hasKey .tq "postroll" }}
    postroll = {{ .tq.postroll | quote }}
    {{- end }}
    {{- if hasKey .tq "watermark" }}
    watermark = {{ .tq.watermark | quote }}
    {{- end }}
    {{- if hasKey .tq "to" }}
    to = {{ .tq.to | quote }}
    {{- end }}
    preroll_offset = {{ .tq.preroll_offset }}
    {{- end }}
    {{- end }}

    {{- with .Values.nats }}
    {{- println "" }}
    [nats]
    url = {{ .url | quote }}
    creds = {{ .creds | quote }}
    subscribe_durable.stream = {{ .subscribe_durable.stream | quote }}
    subscribe_durable.consumer = {{ .subscribe_durable.consumer | quote }}
    subscribe_durable.batch = {{ .subscribe_durable.batch }}
    subscribe_durable.idle_heartbeat = {{ .subscribe_durable.idle_heartbeat | quote }}
    {{- end }}

    {{- with .Values.nats_consumer }}
    {{- println "" }}
    [nats_consumer]
    suspend_interval = {{ .suspend_interval | quote }}
    max_suspend_interval = {{ .max_suspend_interval | quote }}
    suspend_sentry_interval = {{ .suspend_sentry_interval | quote }}
    resubscribe_interval = {{ .resubscribe_interval | quote }}
    {{- end }}

    [storage]
    {{- if .Values.app.storage }}
    base_url = {{ .Values.app.storage.url | quote }}
    {{- else}}
    base_url = {{ (include "dispatcher.defaultStorageUrl" .) }}
    {{- end }}

    ##
    ## ULMS
    ##
    [id_token]
    algorithm = "ES256"
    key = "data/keys/svc.private_key.p8.der"

    {{- println "" }}

    {{- with .Values.app.svc }}
    ##
    ## SVC
    ##

    [authn.{{ .audience | quote }}]
    audience = [{{ .audience | quote }}]
    algorithm = "ES256"
    key = {{ .authn.key | quote }}

    {{- println "" }}
    [authz.{{ $.Values.app.svc.audience | quote }}]
    type = {{ .authz.type | quote }}
    {{- if eq "localwhitelist" .authz.type }}
    [[authz.{{ $.Values.app.svc.audience | quote }}.records]]
    {{- range $record := .authz.records }}
    subject_account_id = {{ get $record "subject_account_id" | quote }}
    object = [
      {{- range $o := get $record "object" }}
      {{ $o | quote }},
      {{- end}}
    ]
    action = {{ get $record "action" | quote }}
    {{- end }}
    {{- end }}
    {{- end }}

    {{- println "" }}

    {{- range .Values.app.audiences }}
    ##
    ## {{ .audience }}
    ##
    {{- $tenantServiceAudience := include "dispatcher.tenantServiceAudience" .audience }}
    {{- $tenantUserAudience := include "dispatcher.tenantUserAudience" .audience }}
    {{- $tenantObjectAudience := include "dispatcher.tenantObjectAudience" (list $.Release.Namespace .audience) }}
    {{- with .authn }}
    [authn.{{ list "iam" $tenantServiceAudience | join "." | quote }}]
    audience = [{{ $tenantServiceAudience | quote }}, {{ $tenantUserAudience | quote }}]
    algorithm = "ES256"
    key = {{ .key | quote }}
    {{- end }}

    {{- println "" }}

    {{- with .authz }}
    [authz.{{ $tenantObjectAudience | quote }}]
    type = {{ .type | quote }}
    {{- if eq "http" .type }}
    uri = {{ .url | required "A proper tenant url for authz required!" | quote }}
    algorithm = {{ default "ES256" .algorithm | quote }}
    key = {{ default "data/keys/svc.private_key.p8.der" .key | quote }}
    user_agent = {{ default $id .user_agent | quote }}
    max_retries = {{ default 3 .max_retries }}
    trusted = [
      {{- range $account_label := .trusted }}
        {{ (list $account_label $.Values.app.svc.audience) | compact | join "." | quote }},
      {{- end }}
    ]
    {{- end }}
    {{- if eq "local" .type }}
    trusted = [
      {{- range $accountLabel := .trusted }}
        {{ list $accountLabel $.Values.app.svc.audience | join "." | quote }},
      {{- end }}
    ]
    {{- end }}
    {{- if eq "localwhitelist" .type }}
    [[authz.{{ $tenantObjectAudience | quote }}.records]]
    {{- range $record := .records }}
    subject_account_id = {{ get $record "subject_account_id" | quote }}
    object = [
      {{- range $o := get $record "object" }}
      {{ $o | quote }},
      {{- end}}
    ]
    action = {{ get $record "action" | quote }}
    {{- end }}
    {{- end }}
    {{- end }}
    {{- println "" }}
    {{- end }}
